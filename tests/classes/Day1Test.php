<?php
include '../classes/Day1/Day1.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-12-27 at 11:46:11.
 */
class Day1Test extends PHPUnit_Framework_TestCase {

    /**
     * @var Day1
     */
    protected $object;
    
    public function countProvider()
    {
        return [
            [1, [1]],
            [4, [1,2,3,4]],
            [6, [6, 9, 15, -2, 92, 11]]
        ];
    }
    public function minProvider()
    {
        return [
            [1, [1]],
            [1, [1,2,3,4]],
            [-2, [6, 9, 15, -2, 92, 11]]
        ];
    }
    public function maxProvider()
    {
        return [
            [1, [1]],
            [4, [1,2,3,4]],
            [92, [6, 9, 15, -2, 92, 11]]
        ];
    }
    public function avgProvider()
    {
        return [
            [1, [1]],
            [2.5, [1,2,3,4]],
            [21.8333, [6, 9, 15, -2, 92, 11]]
        ];
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Day1;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Day1::getCollectionMinimum
     * @dataProvider minProvider
     */
    public function testGetCollectionMinimum($expected, $collection) {
        $this->assertEquals($expected, $this->object->getCollectionMinimum($collection));
    }
    
    /**
     * @covers Day1::getCollectionMinimum
     */
    public function testGetCollectionMinimumEmptySet() {
        $collection = [];
        $this->setExpectedException('InvalidArgumentException');
        $this->assertEquals(1, $this->object->getCollectionMinimum($collection));
    }

    /**
     * @covers Day1::getCollectionMaximum
     * @dataProvider maxProvider
     */
    public function testGetCollectionMaximum($expected, $collection) {
        $this->assertEquals($expected, $this->object->getCollectionMaximum($collection));
    }
    
    /**
     * @covers Day1::getCollectionMaximum
     */
    public function testGetCollectionMaximumEmptySet() {    
        $collection = [];
        $this->setExpectedException('InvalidArgumentException');
        $this->assertEquals(1, $this->object->getCollectionMaximum($collection));
    }

    /**
     * @covers Day1::getCollectionCount
     * @dataProvider countProvider
     */
    public function testGetCollectionCount($expected, $collection) {
        $this->assertEquals($expected, $this->object->getCollectionCount($collection));
    }

    /**
     * @covers Day1::getCollectionMeanAverage
     * @dataProvider avgProvider
     */
    public function testGetCollectionMeanAverage($expected, $collection) {
        $this->assertEquals($expected, $this->object->getCollectionMeanAverage($collection), null, 0.001);
    }
    
    /**
     * @covers Day1::getCollectionMeanAverage
     */
    public function testGetCollectionMeanAverageEmptySet() {
        $collection = [];
        $this->setExpectedException('InvalidArgumentException');
        $this->assertEquals(1, $this->object->getCollectionMeanAverage($collection));
    }

}
